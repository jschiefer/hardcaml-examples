# OASIS_START
# DO NOT EDIT (digest: 8fdf182e34aa9c880af06a21cddd0255)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library HardCamlFramework
"framework/HardCamlFramework.cmxs": use_HardCamlFramework
"framework/framework.cmx": for-pack(HardCamlFramework)
<framework/*.ml{,i,y}>: pkg_hardcaml
<framework/*.ml{,i,y}>: pkg_hardcaml.syntax
# Library HardCamlExamples
"examples/HardCamlExamples.cmxs": use_HardCamlExamples
"examples/add.cmx": for-pack(HardCamlExamples)
"examples/sorting.cmx": for-pack(HardCamlExamples)
"examples/rac.cmx": for-pack(HardCamlExamples)
"examples/cordic.cmx": for-pack(HardCamlExamples)
"examples/prefix.cmx": for-pack(HardCamlExamples)
"examples/mul.cmx": for-pack(HardCamlExamples)
"examples/lfsr.cmx": for-pack(HardCamlExamples)
<examples/*.ml{,i,y}>: pkg_hardcaml
<examples/*.ml{,i,y}>: pkg_hardcaml.syntax
<examples/*.ml{,i,y}>: use_HardCamlFramework
# Library HardCamlFrameworkConsole
"console/HardCamlFrameworkConsole.cmxs": use_HardCamlFrameworkConsole
"console/app.cmx": for-pack(HardCamlFrameworkConsole)
<console/*.ml{,i,y}>: pkg_hardcaml
<console/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<console/*.ml{,i,y}>: pkg_hardcaml.dynlink
<console/*.ml{,i,y}>: pkg_hardcaml.syntax
<console/*.ml{,i,y}>: pkg_omd
<console/*.ml{,i,y}>: pkg_str
<console/*.ml{,i,y}>: use_HardCamlFramework
# Library HardCamlFrameworkJS
"js/HardCamlFrameworkJS.cmxs": use_HardCamlFrameworkJS
"js/web_worker.cmx": for-pack(HardCamlFrameworkJS)
"js/message.cmx": for-pack(HardCamlFrameworkJS)
"js/appmain.cmx": for-pack(HardCamlFrameworkJS)
"js/appww.cmx": for-pack(HardCamlFrameworkJS)
<js/*.ml{,i,y}>: pkg_hardcaml
<js/*.ml{,i,y}>: pkg_hardcaml.js
<js/*.ml{,i,y}>: pkg_hardcaml.syntax
<js/*.ml{,i,y}>: pkg_js_of_ocaml
<js/*.ml{,i,y}>: pkg_js_of_ocaml.syntax
<js/*.ml{,i,y}>: pkg_omd
<js/*.ml{,i,y}>: pkg_str
<js/*.ml{,i,y}>: use_HardCamlExamples
<js/*.ml{,i,y}>: use_HardCamlFramework
# Executable hcsort
<top/hcsort.{native,byte}>: pkg_hardcaml
<top/hcsort.{native,byte}>: pkg_hardcaml-waveterm.lterm
<top/hcsort.{native,byte}>: pkg_hardcaml.dynlink
<top/hcsort.{native,byte}>: pkg_hardcaml.syntax
<top/hcsort.{native,byte}>: pkg_omd
<top/hcsort.{native,byte}>: pkg_str
<top/hcsort.{native,byte}>: use_HardCamlExamples
<top/hcsort.{native,byte}>: use_HardCamlFramework
<top/hcsort.{native,byte}>: use_HardCamlFrameworkConsole
<top/hcsort.{native,byte}>: custom
# Executable hcmul
<top/hcmul.{native,byte}>: pkg_hardcaml
<top/hcmul.{native,byte}>: pkg_hardcaml-waveterm.lterm
<top/hcmul.{native,byte}>: pkg_hardcaml.dynlink
<top/hcmul.{native,byte}>: pkg_hardcaml.syntax
<top/hcmul.{native,byte}>: pkg_omd
<top/hcmul.{native,byte}>: pkg_str
<top/hcmul.{native,byte}>: use_HardCamlExamples
<top/hcmul.{native,byte}>: use_HardCamlFramework
<top/hcmul.{native,byte}>: use_HardCamlFrameworkConsole
<top/hcmul.{native,byte}>: custom
# Executable hclfsr
<top/hclfsr.{native,byte}>: pkg_hardcaml
<top/hclfsr.{native,byte}>: pkg_hardcaml-waveterm.lterm
<top/hclfsr.{native,byte}>: pkg_hardcaml.dynlink
<top/hclfsr.{native,byte}>: pkg_hardcaml.syntax
<top/hclfsr.{native,byte}>: pkg_omd
<top/hclfsr.{native,byte}>: pkg_str
<top/hclfsr.{native,byte}>: use_HardCamlExamples
<top/hclfsr.{native,byte}>: use_HardCamlFramework
<top/hclfsr.{native,byte}>: use_HardCamlFrameworkConsole
<top/hclfsr.{native,byte}>: custom
# Executable hcprefix
<top/hcprefix.{native,byte}>: pkg_hardcaml
<top/hcprefix.{native,byte}>: pkg_hardcaml-waveterm.lterm
<top/hcprefix.{native,byte}>: pkg_hardcaml.dynlink
<top/hcprefix.{native,byte}>: pkg_hardcaml.syntax
<top/hcprefix.{native,byte}>: pkg_omd
<top/hcprefix.{native,byte}>: pkg_str
<top/hcprefix.{native,byte}>: use_HardCamlExamples
<top/hcprefix.{native,byte}>: use_HardCamlFramework
<top/hcprefix.{native,byte}>: use_HardCamlFrameworkConsole
<top/hcprefix.{native,byte}>: custom
# Executable hcrac
<top/hcrac.{native,byte}>: pkg_hardcaml
<top/hcrac.{native,byte}>: pkg_hardcaml-waveterm.lterm
<top/hcrac.{native,byte}>: pkg_hardcaml.dynlink
<top/hcrac.{native,byte}>: pkg_hardcaml.syntax
<top/hcrac.{native,byte}>: pkg_omd
<top/hcrac.{native,byte}>: pkg_str
<top/hcrac.{native,byte}>: use_HardCamlExamples
<top/hcrac.{native,byte}>: use_HardCamlFramework
<top/hcrac.{native,byte}>: use_HardCamlFrameworkConsole
<top/hcrac.{native,byte}>: custom
# Executable hccordic
<top/hccordic.{native,byte}>: pkg_hardcaml
<top/hccordic.{native,byte}>: pkg_hardcaml-waveterm.lterm
<top/hccordic.{native,byte}>: pkg_hardcaml.dynlink
<top/hccordic.{native,byte}>: pkg_hardcaml.syntax
<top/hccordic.{native,byte}>: pkg_omd
<top/hccordic.{native,byte}>: pkg_str
<top/hccordic.{native,byte}>: use_HardCamlExamples
<top/hccordic.{native,byte}>: use_HardCamlFramework
<top/hccordic.{native,byte}>: use_HardCamlFrameworkConsole
<top/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<top/*.ml{,i,y}>: pkg_hardcaml.dynlink
<top/*.ml{,i,y}>: use_HardCamlFrameworkConsole
<top/hccordic.{native,byte}>: custom
# Executable hcjssort
"top/hcjssort.byte": pkg_hardcaml
"top/hcjssort.byte": pkg_hardcaml.js
"top/hcjssort.byte": pkg_hardcaml.syntax
"top/hcjssort.byte": pkg_js_of_ocaml
"top/hcjssort.byte": pkg_js_of_ocaml.syntax
"top/hcjssort.byte": pkg_omd
"top/hcjssort.byte": pkg_str
"top/hcjssort.byte": use_HardCamlExamples
"top/hcjssort.byte": use_HardCamlFramework
"top/hcjssort.byte": use_HardCamlFrameworkJS
"top/hcjssort.byte": custom
# Executable hcwwsort
"top/hcwwsort.byte": pkg_hardcaml
"top/hcwwsort.byte": pkg_hardcaml.js
"top/hcwwsort.byte": pkg_hardcaml.syntax
"top/hcwwsort.byte": pkg_js_of_ocaml
"top/hcwwsort.byte": pkg_js_of_ocaml.syntax
"top/hcwwsort.byte": pkg_omd
"top/hcwwsort.byte": pkg_str
"top/hcwwsort.byte": use_HardCamlExamples
"top/hcwwsort.byte": use_HardCamlFramework
"top/hcwwsort.byte": use_HardCamlFrameworkJS
"top/hcwwsort.byte": custom
# Executable hcjsrac
"top/hcjsrac.byte": pkg_hardcaml
"top/hcjsrac.byte": pkg_hardcaml.js
"top/hcjsrac.byte": pkg_hardcaml.syntax
"top/hcjsrac.byte": pkg_js_of_ocaml
"top/hcjsrac.byte": pkg_js_of_ocaml.syntax
"top/hcjsrac.byte": pkg_omd
"top/hcjsrac.byte": pkg_str
"top/hcjsrac.byte": use_HardCamlExamples
"top/hcjsrac.byte": use_HardCamlFramework
"top/hcjsrac.byte": use_HardCamlFrameworkJS
"top/hcjsrac.byte": custom
# Executable hcwwrac
"top/hcwwrac.byte": pkg_hardcaml
"top/hcwwrac.byte": pkg_hardcaml.js
"top/hcwwrac.byte": pkg_hardcaml.syntax
"top/hcwwrac.byte": pkg_js_of_ocaml
"top/hcwwrac.byte": pkg_js_of_ocaml.syntax
"top/hcwwrac.byte": pkg_omd
"top/hcwwrac.byte": pkg_str
"top/hcwwrac.byte": use_HardCamlExamples
"top/hcwwrac.byte": use_HardCamlFramework
"top/hcwwrac.byte": use_HardCamlFrameworkJS
<top/*.ml{,i,y}>: pkg_hardcaml
<top/*.ml{,i,y}>: pkg_hardcaml.js
<top/*.ml{,i,y}>: pkg_hardcaml.syntax
<top/*.ml{,i,y}>: pkg_js_of_ocaml
<top/*.ml{,i,y}>: pkg_js_of_ocaml.syntax
<top/*.ml{,i,y}>: pkg_omd
<top/*.ml{,i,y}>: pkg_str
<top/*.ml{,i,y}>: use_HardCamlExamples
<top/*.ml{,i,y}>: use_HardCamlFramework
<top/*.ml{,i,y}>: use_HardCamlFrameworkJS
"top/hcwwrac.byte": custom
# OASIS_STOP
